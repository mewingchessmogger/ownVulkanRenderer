<!DOCTYPE html>
<html lang="en" class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Rendering Multiple Objects :: Vulkan Documentation Project</title>
    <meta name="generator" content="Antora 3.1.10">
    <script>
      !function (theme) {
        if (theme === 'dark') document.documentElement.classList.add('dark')
        else document.documentElement.classList.add('light')
      }(localStorage && localStorage.getItem('theme') || (matchMedia('(prefers-color-scheme: dark)')?.matches && 'dark'))
    </script>
    <link rel="stylesheet" href="r_files/site.css">
    <link rel="stylesheet" href="r_files/tabs.css">
    <link rel="apple-touch-icon" sizes="180x180" href="https://docs.vulkan.org/_/img/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="https://docs.vulkan.org/_/img/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="https://docs.vulkan.org/_/img/favicon-16x16.png">
    <link rel="manifest" href="https://docs.vulkan.org/_/static/site.webmanifest">
    <link rel="mask-icon" href="https://docs.vulkan.org/_/img/safari-pinned-tab.svg" color="#a41e22">
    <meta name="msapplication-TileColor" content="#ffc40d">
  <link rel="stylesheet" href="r_files/search.css"></head>
  <body class="article">
<header class="header">
  <nav class="navbar">
    <div class="navbar-brand">
      <a class="navbar-item" href="https://docs.vulkan.org/"><img class="navbar-item" alt="Vulkan White Label" src="r_files/Vulkan_Docs.svg"></a>
      <div class="navbar-item search hide-for-print">
        <div id="search-field" class="field has-filter">
          <label for="search-input"></label>
          <input id="search-input" type="text" placeholder="Search the docs" title="">
          <label class="filter checkbox">
            <input type="checkbox" data-facet-filter="component:tutorial" checked="checked"> In this component
          </label>
        <div class="search-result-dropdown-menu"></div></div>
      </div>
      <button class="navbar-burger" aria-controls="topbar-nav" aria-expanded="false" aria-label="Toggle main menu">
        <span></span>
        <span></span>
        <span></span>
      </button>
    </div>
    <div id="topbar-nav" class="navbar-menu">
      <div class="navbar-end">
        <!-- <a class="navbar-item" href="#">Home</a> -->
        <div class="navbar-item has-dropdown is-hoverable">
          <a class="navbar-link" href="#">Specs</a>
          <div class="navbar-dropdown is-right">
            <a class="navbar-item" href="https://docs.vulkan.org/spec/latest/chapters/introduction.html">Vulkan API</a>
            <a class="navbar-item" href="https://docs.vulkan.org/glsl/latest/index.html">GLSL</a>
            <a class="navbar-item" href="https://docs.vulkan.org/guide/latest/hlsl.html">HLSL</a>
          </div>
        </div>
        <div class="navbar-item has-dropdown is-hoverable">
          <a class="navbar-link" href="#">Education</a>
          <div class="navbar-dropdown is-right">
            <a class="navbar-item" href="https://docs.vulkan.org/features/latest/features/index.html">Vulkan Feature Descriptions</a>
            <a class="navbar-item" href="https://docs.vulkan.org/guide/latest/index.html">Vulkan Guide</a>
            <a class="navbar-item" href="https://docs.vulkan.org/samples/latest/README.html">Vulkan Samples</a>
            <a class="navbar-item" href="https://docs.vulkan.org/tutorial/latest/index.html">Vulkan Tutorial</a>
            <a class="navbar-item" href="https://www.youtube.com/c/vulkan">YouTube</a>
            <a class="navbar-item" href="https://vulkan.org/">More Info at Vulkan.org</a>
          </div>
        </div>
        <div class="navbar-item has-dropdown is-hoverable">
          <a class="navbar-link" href="#">Feedback</a>
          <div class="navbar-dropdown is-right">
            <a class="navbar-item" href="https://github.com/KhronosGroup/Vulkan-Site/issues/new/choose" target="_blank">Report a Problem</a>
          </div>
        </div>
        <div class="navbar-item has-dropdown is-hoverable">
          <a class="navbar-link" href="#">Community</a>
          <div class="navbar-dropdown is-right">
            <a class="navbar-item" href="https://discord.gg/vulkan">Vulkan Discord</a>
            <a class="navbar-item" href="https://reddit.com/r/vulkan">Reddit</a>
            <a class="navbar-item" href="https://stackoverflow.com/questions/tagged/vulkan">Stack Overflow</a>
            <a class="navbar-item" href="https://fosstodon.org/@vulkan">Mastodon</a>
          </div>
        </div>
      </div>
    </div>
    <label class="theme-toggler active">
      <input type="checkbox" id="switch-theme-checkbox" name="switch-theme-checkbox" checked="checked">
      <span class="icon"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="moon" class="svg-inline--fa fa-moon moon" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path fill="currentColor" d="M223.5 32C100 32 0 132.3 0 256S100 480 223.5 480c60.6 0 115.5-24.2 155.8-63.4c5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6c-96.9 0-175.5-78.8-175.5-176c0-65.8 36-123.1 89.3-153.3c6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z"></path>
        </svg>
        <svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="sun" class="svg-inline--fa fa-sun sun" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M361.5 1.2c5 2.1 8.6 6.6 9.6 11.9L391 121l107.9 19.8c5.3 1 9.8 4.6 11.9 9.6s1.5 10.7-1.6 15.2L446.9 256l62.3 90.3c3.1 4.5 3.7 10.2 1.6 15.2s-6.6 8.6-11.9 9.6L391 391 371.1 498.9c-1 5.3-4.6 9.8-9.6 11.9s-10.7 1.5-15.2-1.6L256 446.9l-90.3 62.3c-4.5 3.1-10.2 3.7-15.2 1.6s-8.6-6.6-9.6-11.9L121 391 13.1 371.1c-5.3-1-9.8-4.6-11.9-9.6s-1.5-10.7 1.6-15.2L65.1 256 2.8 165.7c-3.1-4.5-3.7-10.2-1.6-15.2s6.6-8.6 11.9-9.6L121 121 140.9 13.1c1-5.3 4.6-9.8 9.6-11.9s10.7-1.5 15.2 1.6L256 65.1 346.3 2.8c4.5-3.1 10.2-3.7 15.2-1.6zM160 256a96 96 0 1 1 192 0 96 96 0 1 1 -192 0zm224 0a128 128 0 1 0 -256 0 128 128 0 1 0 256 0z"></path>
        </svg></span>
    </label>
  </nav>
</header>
<script>
  window.onload = function() {
    let e = document.getElementById("switch-theme-checkbox")
    e.checked = document.documentElement.classList.contains("dark");
    e.checked ? e.parentElement.classList.add("active") : e.parentElement.classList.remove("active")
  }
  !function() {
    let e = document.getElementById("switch-theme-checkbox")
    e.checked = document.documentElement.classList.contains("dark")
    e.addEventListener("change", function() {
      if (document.documentElement.classList.contains("light")) {
        document.documentElement.classList.remove("light")
        document.documentElement.classList.add("dark")
      } else if (document.documentElement.classList.contains("dark")) {
        document.documentElement.classList.remove("dark")
        document.documentElement.classList.add("light")
      } else {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          document.documentElement.classList.add("dark")
        } else {
          document.documentElement.classList.add("light")
        }
      }
      document.documentElement.setAttribute("data-theme", this.checked ? "dark" : "light"),
        function(e) {
          window.localStorage && window.localStorage.setItem("theme", e)
        }(this.checked ? "dark" : "light"), this.checked ? this.parentElement.classList.add("active") : this.parentElement.classList.remove("active")
    }.bind(e))
  }();
</script>
<div class="body">
<div class="nav-container" data-component="tutorial" data-version="latest" id="split-0" style="width: calc(21.0227% - 5px);">
  <aside class="nav">
    <div class="panels">
<div class="nav-panel-menu is-active" data-panel="menu">
  <nav class="nav-menu">
    <button class="nav-menu-toggle" aria-label="Toggle expand/collapse all" style=""></button>
    <h3 class="title"><a href="https://docs.vulkan.org/tutorial/latest/00_Introduction.html">Khronos Vulkan Tutorial</a></h3>
<ul class="nav-list">
  <li class="nav-item is-active is-current-path" data-depth="0">
<ul class="nav-list">
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/00_Introduction.html">Introduction</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/01_Overview.html">Overview</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/02_Development_environment.html">Development environment</a>
  </li>
  <li class="nav-item" data-depth="1">
    <button class="nav-item-toggle"></button>
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/00_Setup/00_Base_code.html">Drawing a triangle</a>
<ul class="nav-list">
  <li class="nav-item" data-depth="2">
    <button class="nav-item-toggle"></button>
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/00_Setup/00_Base_code.html">Setup</a>
<ul class="nav-list">
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/00_Setup/00_Base_code.html">Base Code</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/00_Setup/01_Instance.html">Instance</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/00_Setup/02_Validation_layers.html">Validation layers</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/00_Setup/03_Physical_devices_and_queue_families.html">Physical devices and queue families</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/00_Setup/04_Logical_device_and_queues.html">Logical device and queues</a>
  </li>
</ul>
  </li>
  <li class="nav-item" data-depth="2">
    <button class="nav-item-toggle"></button>
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/01_Presentation/00_Window_surface.html">Presentation</a>
<ul class="nav-list">
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/01_Presentation/00_Window_surface.html">Window surface</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/01_Presentation/01_Swap_chain.html">Swap chain</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/01_Presentation/02_Image_views.html">Image views</a>
  </li>
</ul>
  </li>
  <li class="nav-item" data-depth="2">
    <button class="nav-item-toggle"></button>
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/00_Introduction.html">Graphics pipeline basics</a>
<ul class="nav-list">
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/00_Introduction.html">Introduction</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/01_Shader_modules.html">Shader modules</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/02_Fixed_functions.html">Fixed functions</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/03_Render_passes.html">Render passes</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/04_Conclusion.html">Conclusion</a>
  </li>
</ul>
  </li>
  <li class="nav-item" data-depth="2">
    <button class="nav-item-toggle"></button>
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/03_Drawing/00_Framebuffers.html">Drawing</a>
<ul class="nav-list">
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/03_Drawing/00_Framebuffers.html">Framebuffers</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/03_Drawing/01_Command_buffers.html">Command buffers</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/03_Drawing/02_Rendering_and_presentation.html">Rendering and presentation</a>
  </li>
  <li class="nav-item" data-depth="3">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/03_Drawing/03_Frames_in_flight.html">Frames in flight</a>
  </li>
</ul>
  </li>
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/04_Swap_chain_recreation.html">Swap chain recreation</a>
  </li>
</ul>
  </li>
  <li class="nav-item" data-depth="1">
    <button class="nav-item-toggle"></button>
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/04_Vertex_buffers/00_Vertex_input_description.html">Vertex buffers</a>
<ul class="nav-list">
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/04_Vertex_buffers/00_Vertex_input_description.html">Vertex input description</a>
  </li>
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/04_Vertex_buffers/01_Vertex_buffer_creation.html">Vertex buffer creation</a>
  </li>
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/04_Vertex_buffers/02_Staging_buffer.html">Staging buffer</a>
  </li>
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/04_Vertex_buffers/03_Index_buffer.html">Index buffer</a>
  </li>
</ul>
  </li>
  <li class="nav-item" data-depth="1">
    <button class="nav-item-toggle"></button>
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/05_Uniform_buffers/00_Descriptor_set_layout_and_buffer.html">Uniform buffers</a>
<ul class="nav-list">
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/05_Uniform_buffers/00_Descriptor_set_layout_and_buffer.html">Descriptor layout and buffer</a>
  </li>
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/05_Uniform_buffers/01_Descriptor_pool_and_sets.html">Descriptor pool and sets</a>
  </li>
</ul>
  </li>
  <li class="nav-item" data-depth="1">
    <button class="nav-item-toggle"></button>
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/06_Texture_mapping/00_Images.html">Texture mapping</a>
<ul class="nav-list">
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/06_Texture_mapping/00_Images.html">Images</a>
  </li>
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/06_Texture_mapping/01_Image_view_and_sampler.html">Image view and sampler</a>
  </li>
  <li class="nav-item" data-depth="2">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/06_Texture_mapping/02_Combined_image_sampler.html">Combined image sampler</a>
  </li>
</ul>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/07_Depth_buffering.html">Depth buffering</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/08_Loading_models.html">Loading models</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/09_Generating_Mipmaps.html">Generating Mipmaps</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/10_Multisampling.html">Multisampling</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/11_Compute_Shader.html">Compute Shader</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/12_Ecosystem_Utilities_and_Compatibility.html">Ecosystem Utilities and GPU Compatibility</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/13_Vulkan_Profiles.html">Vulkan Profiles</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/14_Android.html">Android</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/15_GLTF_KTX2_Migration.html">Migrating to Modern Asset Formats: glTF and KTX2</a>
  </li>
  <li class="nav-item is-current-page is-active" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/16_Multiple_Objects.html">Rendering Multiple Objects</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/17_Multithreading.html">Multithreading</a>
  </li>
  <li class="nav-item" data-depth="1">
    <a class="nav-link" href="https://docs.vulkan.org/tutorial/latest/90_FAQ.html">FAQ</a>
  </li>
</ul>
  </li>
</ul>
  </nav>
</div>
<div class="nav-panel-explore" data-panel="explore">
  <div class="context">
    <span class="title">Khronos Vulkan Tutorial</span>
    <span class="version">latest</span>
  </div>
  <ul class="components">
    <li class="component is-current">
      <div class="title"><a href="https://docs.vulkan.org/tutorial/latest/00_Introduction.html">Khronos Vulkan Tutorial</a></div>
      <ul class="versions">
        <li class="version is-current is-latest">
          <a href="https://docs.vulkan.org/tutorial/latest/00_Introduction.html">latest</a>
        </li>
      </ul>
    </li>
    <li class="component">
      <div class="title"><a href="https://docs.vulkan.org/glsl/latest/index.html">OpenGL Shading Language Specification</a></div>
      <ul class="versions">
        <li class="version is-latest">
          <a href="https://docs.vulkan.org/glsl/latest/index.html">latest</a>
        </li>
      </ul>
    </li>
    <li class="component">
      <div class="title"><a href="https://docs.vulkan.org/features/latest/features/index.html">Vulkan Feature Descriptions</a></div>
      <ul class="versions">
        <li class="version is-latest">
          <a href="https://docs.vulkan.org/features/latest/features/index.html">latest</a>
        </li>
      </ul>
    </li>
    <li class="component">
      <div class="title"><a href="https://docs.vulkan.org/guide/latest/index.html">Vulkan Guide</a></div>
      <ul class="versions">
        <li class="version is-latest">
          <a href="https://docs.vulkan.org/guide/latest/index.html">latest</a>
        </li>
      </ul>
    </li>
    <li class="component">
      <div class="title"><a href="https://docs.vulkan.org/samples/latest/README.html">Vulkan Samples</a></div>
      <ul class="versions">
        <li class="version is-latest">
          <a href="https://docs.vulkan.org/samples/latest/README.html">latest</a>
        </li>
      </ul>
    </li>
    <li class="component">
      <div class="title"><a href="https://docs.vulkan.org/spec/latest/index.html">Vulkan Specification</a></div>
      <ul class="versions">
        <li class="version is-latest">
          <a href="https://docs.vulkan.org/spec/latest/index.html">latest</a>
        </li>
      </ul>
    </li>
  </ul>
</div>
    </div>
  </aside>
</div>
<div class="gutter gutter-horizontal" style="width: 10px;"></div><main class="article" id="split-1" style="width: calc(78.9773% - 5px);">
<div class="toolbar" role="navigation">
<button class="nav-toggle"></button>
  <a href="https://docs.vulkan.org/spec/latest/index.html" class="home-link"></a>
<nav class="breadcrumbs" aria-label="breadcrumbs">
  <ul>
    <li><a href="https://docs.vulkan.org/tutorial/latest/00_Introduction.html">Khronos Vulkan Tutorial</a></li>
    <li><a href="https://docs.vulkan.org/tutorial/latest/16_Multiple_Objects.html">Rendering Multiple Objects</a></li>
  </ul>
</nav>
</div>
  <div class="content">
<aside class="toc sidebar" data-title="Contents" data-levels="2">
  <div class="toc-menu"><h3>Contents</h3><ul><li data-level="1"><a href="#_introduction" class="">Introduction</a></li><li data-level="1"><a href="#_overview" class="">Overview</a></li><li data-level="1"><a href="#_implementation" class="">Implementation</a></li><li data-level="2"><a href="#_define_a_gameobject_structure" class="">Define a GameObject Structure</a></li><li data-level="2"><a href="#_create_an_array_of_gameobjects" class="">Create an Array of GameObjects</a></li><li data-level="2"><a href="#_initialize_the_gameobjects" class="">Initialize the GameObjects</a></li><li data-level="2"><a href="#_create_uniform_buffers_for_each_object" class="is-active">Create Uniform Buffers for Each Object</a></li><li data-level="2"><a href="#_update_the_descriptor_pool_size" class="">Update the Descriptor Pool Size</a></li><li data-level="2"><a href="#_create_descriptor_sets_for_each_object" class="">Create Descriptor Sets for Each Object</a></li><li data-level="2"><a href="#_update_uniform_buffers_for_all_objects" class="">Update Uniform Buffers for All Objects</a></li><li data-level="2"><a href="#_modify_the_command_buffer_recording" class="">Modify the Command Buffer Recording</a></li><li data-level="1"><a href="#_performance_considerations" class="">Performance Considerations</a></li><li data-level="1"><a href="#_conclusion">Conclusion</a></li></ul></div>
</aside>
<article class="doc">
<h1 class="page">Rendering Multiple Objects</h1>
<aside class="toc embedded"><div class="toc-menu"><h3>Contents</h3><ul><li data-level="1"><a href="#_introduction">Introduction</a></li><li data-level="1"><a href="#_overview">Overview</a></li><li data-level="1"><a href="#_implementation">Implementation</a></li><li data-level="2"><a href="#_define_a_gameobject_structure">Define a GameObject Structure</a></li><li data-level="2"><a href="#_create_an_array_of_gameobjects">Create an Array of GameObjects</a></li><li data-level="2"><a href="#_initialize_the_gameobjects">Initialize the GameObjects</a></li><li data-level="2"><a href="#_create_uniform_buffers_for_each_object">Create Uniform Buffers for Each Object</a></li><li data-level="2"><a href="#_update_the_descriptor_pool_size">Update the Descriptor Pool Size</a></li><li data-level="2"><a href="#_create_descriptor_sets_for_each_object">Create Descriptor Sets for Each Object</a></li><li data-level="2"><a href="#_update_uniform_buffers_for_all_objects">Update Uniform Buffers for All Objects</a></li><li data-level="2"><a href="#_modify_the_command_buffer_recording">Modify the Command Buffer Recording</a></li><li data-level="1"><a href="#_performance_considerations">Performance Considerations</a></li><li data-level="1"><a href="#_conclusion">Conclusion</a></li></ul></div></aside><div class="sect1">
<h2 id="_introduction"><a class="anchor" href="#_introduction"></a>Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this chapter, we’ll extend our Vulkan application to render 
multiple objects in the scene. So far, we’ve been rendering a single 
model, but real-world applications typically need to display many 
objects. This tutorial will show you how to efficiently manage and 
render multiple objects while reusing as many resources as possible.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_overview"><a class="anchor" href="#_overview"></a>Overview</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When rendering multiple objects, we need to consider which resources should be:
1. <strong>Shared across all objects</strong> - to minimize memory usage and state changes
2. <strong>Duplicated for each object</strong> - to allow for independent positioning and appearance</p>
</div>
<div class="paragraph">
<p>Here’s a quick reference for what typically falls into each category:</p>
</div>
<div class="paragraph">
<p><strong>Shared resources:</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Vertex and index buffers (when objects use the same mesh)</p>
</li>
<li>
<p>Textures and samplers (when objects use the same textures)</p>
</li>
<li>
<p>Pipeline objects and pipeline layouts</p>
</li>
<li>
<p>Render passes</p>
</li>
<li>
<p>Command pools</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Per-object resources:</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Transformation matrices (position, rotation, scale)</p>
</li>
<li>
<p>Uniform buffers containing those matrices</p>
</li>
<li>
<p>Descriptor sets that reference those uniform buffers</p>
</li>
<li>
<p>Push constants (for small, frequently changing data)</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_implementation"><a class="anchor" href="#_implementation"></a>Implementation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let’s walk through the key changes needed to render multiple objects:</p>
</div>
<div class="sect2">
<h3 id="_define_a_gameobject_structure"><a class="anchor" href="#_define_a_gameobject_structure"></a>Define a GameObject Structure</h3>
<div class="paragraph">
<p>First, we’ll create a structure to hold per-object data:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-c++ hljs cpp" data-lang="c++"><span class="hljs-comment">// Define a structure to hold per-object data</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GameObject</span> {</span>
    <span class="hljs-comment">// Transform properties</span>
    glm::vec3 position = {<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>};
    glm::vec3 rotation = {<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>};
    glm::vec3 scale = {<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>};

    <span class="hljs-comment">// Uniform buffer for this object (one per frame in flight)</span>
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;vk::raii::Buffer&gt; uniformBuffers;
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;vk::raii::DeviceMemory&gt; uniformBuffersMemory;
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">void</span>*&gt; uniformBuffersMapped;

    <span class="hljs-comment">// Descriptor sets for this object (one per frame in flight)</span>
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;vk::raii::DescriptorSet&gt; descriptorSets;

    <span class="hljs-comment">// Calculate model matrix based on position, rotation, and scale</span>
    <span class="hljs-function">glm::mat4 <span class="hljs-title">getModelMatrix</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>{
        glm::mat4 model = glm::mat4(<span class="hljs-number">1.0f</span>);
        model = glm::translate(model, position);
        model = glm::rotate(model, rotation.x, glm::vec3(<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>));
        model = glm::rotate(model, rotation.y, glm::vec3(<span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>));
        model = glm::rotate(model, rotation.z, glm::vec3(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>));
        model = glm::scale(model, scale);
        <span class="hljs-keyword">return</span> model;
    }
};</code></pre>
<div class="source-toolbox"><span class="source-lang">c++</span><button class="copy-button" title="Copy to clipboard"><img src="r_files/octicons-16.svg" alt="copy icon" class="copy-icon"><span class="copy-toast">Copied!</span></button></div></div>
</div>
<div class="paragraph">
<p>This structure encapsulates:
* The object’s transform (position, rotation, scale)
* Per-object uniform buffers (one for each frame in flight)
* Per-object descriptor sets (one for each frame in flight)
* A helper method to calculate the model matrix</p>
</div>
</div>
<div class="sect2">
<h3 id="_create_an_array_of_gameobjects"><a class="anchor" href="#_create_an_array_of_gameobjects"></a>Create an Array of GameObjects</h3>
<div class="paragraph">
<p>In our application class, we’ll replace the single set of uniform buffers and descriptor sets with an array of GameObjects:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-c++ hljs cpp" data-lang="c++"><span class="hljs-comment">// Define the number of objects to render</span>
<span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> MAX_OBJECTS = <span class="hljs-number">3</span>;

<span class="hljs-comment">// In the VulkanApplication class:</span>
<span class="hljs-comment">// Array of game objects to render</span>
<span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span>&lt;GameObject, MAX_OBJECTS&gt; gameObjects;</code></pre>
<div class="source-toolbox"><span class="source-lang">c++</span><button class="copy-button" title="Copy to clipboard"><img src="r_files/octicons-16.svg" alt="copy icon" class="copy-icon"><span class="copy-toast">Copied!</span></button></div></div>
</div>
</div>
<div class="sect2">
<h3 id="_initialize_the_gameobjects"><a class="anchor" href="#_initialize_the_gameobjects"></a>Initialize the GameObjects</h3>
<div class="paragraph">
<p>We’ll add a new method to set up our game objects with different positions, rotations, and scales:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-c++ hljs cpp" data-lang="c++"><span class="hljs-comment">// Initialize the game objects with different positions, rotations, and scales</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setupGameObjects</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-comment">// Object 1 - Center</span>
    gameObjects[<span class="hljs-number">0</span>].position = {<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>};
    gameObjects[<span class="hljs-number">0</span>].rotation = {<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>};
    gameObjects[<span class="hljs-number">0</span>].scale = {<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>};

    <span class="hljs-comment">// Object 2 - Left</span>
    gameObjects[<span class="hljs-number">1</span>].position = {<span class="hljs-number">-2.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">-1.0f</span>};
    gameObjects[<span class="hljs-number">1</span>].rotation = {<span class="hljs-number">0.0f</span>, glm::radians(<span class="hljs-number">45.0f</span>), <span class="hljs-number">0.0f</span>};
    gameObjects[<span class="hljs-number">1</span>].scale = {<span class="hljs-number">0.75f</span>, <span class="hljs-number">0.75f</span>, <span class="hljs-number">0.75f</span>};

    <span class="hljs-comment">// Object 3 - Right</span>
    gameObjects[<span class="hljs-number">2</span>].position = {<span class="hljs-number">2.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">-1.0f</span>};
    gameObjects[<span class="hljs-number">2</span>].rotation = {<span class="hljs-number">0.0f</span>, glm::radians(<span class="hljs-number">-45.0f</span>), <span class="hljs-number">0.0f</span>};
    gameObjects[<span class="hljs-number">2</span>].scale = {<span class="hljs-number">0.75f</span>, <span class="hljs-number">0.75f</span>, <span class="hljs-number">0.75f</span>};
}</code></pre>
<div class="source-toolbox"><span class="source-lang">c++</span><button class="copy-button" title="Copy to clipboard"><img src="r_files/octicons-16.svg" alt="copy icon" class="copy-icon"><span class="copy-toast">Copied!</span></button></div></div>
</div>
<div class="paragraph">
<p>This method is called from <code>initVulkan()</code> after loading the model but before creating uniform buffers.</p>
</div>
</div>
<div class="sect2">
<h3 id="_create_uniform_buffers_for_each_object"><a class="anchor" href="#_create_uniform_buffers_for_each_object"></a>Create Uniform Buffers for Each Object</h3>
<div class="paragraph">
<p>Instead of creating a single set of uniform buffers, we’ll create them for each object:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-c++ hljs cpp" data-lang="c++"><span class="hljs-comment">// Create uniform buffers for each object</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createUniformBuffers</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-comment">// For each game object</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; gameObject : gameObjects) {
        gameObject.uniformBuffers.clear();
        gameObject.uniformBuffersMemory.clear();
        gameObject.uniformBuffersMapped.clear();

        <span class="hljs-comment">// Create uniform buffers for each frame in flight</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; MAX_FRAMES_IN_FLIGHT; i++) {
            vk::DeviceSize bufferSize = <span class="hljs-keyword">sizeof</span>(UniformBufferObject);
            vk::<span class="hljs-function">raii::Buffer <span class="hljs-title">buffer</span><span class="hljs-params">({})</span></span>;
            vk::<span class="hljs-function">raii::DeviceMemory <span class="hljs-title">bufferMem</span><span class="hljs-params">({})</span></span>;
            createBuffer(bufferSize, vk::BufferUsageFlagBits::eUniformBuffer,
                         vk::MemoryPropertyFlagBits::eHostVisible | vk::MemoryPropertyFlagBits::eHostCoherent,
                         buffer, bufferMem);
            gameObject.uniformBuffers.emplace_back(<span class="hljs-built_in">std</span>::move(buffer));
            gameObject.uniformBuffersMemory.emplace_back(<span class="hljs-built_in">std</span>::move(bufferMem));
            gameObject.uniformBuffersMapped.emplace_back(gameObject.uniformBuffersMemory[i].mapMemory(<span class="hljs-number">0</span>, bufferSize));
        }
    }
}</code></pre>
<div class="source-toolbox"><span class="source-lang">c++</span><button class="copy-button" title="Copy to clipboard"><img src="r_files/octicons-16.svg" alt="copy icon" class="copy-icon"><span class="copy-toast">Copied!</span></button></div></div>
</div>
</div>
<div class="sect2">
<h3 id="_update_the_descriptor_pool_size"><a class="anchor" href="#_update_the_descriptor_pool_size"></a>Update the Descriptor Pool Size</h3>
<div class="paragraph">
<p>We need to increase the descriptor pool size to accommodate all objects:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-c++ hljs cpp" data-lang="c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createDescriptorPool</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-comment">// We need MAX_OBJECTS * MAX_FRAMES_IN_FLIGHT descriptor sets</span>
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span> poolSize {
        vk::DescriptorPoolSize(vk::DescriptorType::eUniformBuffer, MAX_OBJECTS * MAX_FRAMES_IN_FLIGHT),
        vk::DescriptorPoolSize(vk::DescriptorType::eCombinedImageSampler, MAX_OBJECTS * MAX_FRAMES_IN_FLIGHT)
    };
    vk::DescriptorPoolCreateInfo poolInfo{
        .flags = vk::DescriptorPoolCreateFlagBits::eFreeDescriptorSet,
        .maxSets = MAX_OBJECTS * MAX_FRAMES_IN_FLIGHT,
        .poolSizeCount = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">uint32_t</span>&gt;(poolSize.size()),
        .pPoolSizes = poolSize.data()
    };
    descriptorPool = vk::raii::DescriptorPool(device, poolInfo);
}</code></pre>
<div class="source-toolbox"><span class="source-lang">c++</span><button class="copy-button" title="Copy to clipboard"><img src="r_files/octicons-16.svg" alt="copy icon" class="copy-icon"><span class="copy-toast">Copied!</span></button></div></div>
</div>
</div>
<div class="sect2">
<h3 id="_create_descriptor_sets_for_each_object"><a class="anchor" href="#_create_descriptor_sets_for_each_object"></a>Create Descriptor Sets for Each Object</h3>
<div class="paragraph">
<p>Similarly, we’ll create descriptor sets for each object:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-c++ hljs cpp" data-lang="c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createDescriptorSets</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-comment">// For each game object</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; gameObject : gameObjects) {
        <span class="hljs-comment">// Create descriptor sets for each frame in flight</span>
        <span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;vk::DescriptorSetLayout&gt; <span class="hljs-title">layouts</span><span class="hljs-params">(MAX_FRAMES_IN_FLIGHT, *descriptorSetLayout)</span></span>;
        vk::DescriptorSetAllocateInfo allocInfo{
            .descriptorPool = *descriptorPool,
            .descriptorSetCount = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">uint32_t</span>&gt;(layouts.size()),
            .pSetLayouts = layouts.data()
        };

        gameObject.descriptorSets.clear();
        gameObject.descriptorSets = device.allocateDescriptorSets(allocInfo);

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; MAX_FRAMES_IN_FLIGHT; i++) {
            vk::DescriptorBufferInfo bufferInfo{
                .buffer = *gameObject.uniformBuffers[i],
                .offset = <span class="hljs-number">0</span>,
                .range = <span class="hljs-keyword">sizeof</span>(UniformBufferObject)
            };
            vk::DescriptorImageInfo imageInfo{
                .sampler = *textureSampler,
                .imageView = *textureImageView,
                .imageLayout = vk::ImageLayout::eShaderReadOnlyOptimal
            };
            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span> descriptorWrites{
                vk::WriteDescriptorSet{
                    .dstSet = *gameObject.descriptorSets[i],
                    .dstBinding = <span class="hljs-number">0</span>,
                    .dstArrayElement = <span class="hljs-number">0</span>,
                    .descriptorCount = <span class="hljs-number">1</span>,
                    .descriptorType = vk::DescriptorType::eUniformBuffer,
                    .pBufferInfo = &amp;bufferInfo
                },
                vk::WriteDescriptorSet{
                    .dstSet = *gameObject.descriptorSets[i],
                    .dstBinding = <span class="hljs-number">1</span>,
                    .dstArrayElement = <span class="hljs-number">0</span>,
                    .descriptorCount = <span class="hljs-number">1</span>,
                    .descriptorType = vk::DescriptorType::eCombinedImageSampler,
                    .pImageInfo = &amp;imageInfo
                }
            };
            device.updateDescriptorSets(descriptorWrites, {});
        }
    }
}</code></pre>
<div class="source-toolbox"><span class="source-lang">c++</span><button class="copy-button" title="Copy to clipboard"><img src="r_files/octicons-16.svg" alt="copy icon" class="copy-icon"><span class="copy-toast">Copied!</span></button></div></div>
</div>
</div>
<div class="sect2">
<h3 id="_update_uniform_buffers_for_all_objects"><a class="anchor" href="#_update_uniform_buffers_for_all_objects"></a>Update Uniform Buffers for All Objects</h3>
<div class="paragraph">
<p>We’ll modify the uniform buffer update to handle all objects:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-c++ hljs cpp" data-lang="c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUniformBuffers</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">auto</span> startTime = <span class="hljs-built_in">std</span>::chrono::high_resolution_clock::now();
    <span class="hljs-keyword">auto</span> currentTime = <span class="hljs-built_in">std</span>::chrono::high_resolution_clock::now();
    <span class="hljs-keyword">float</span> time = <span class="hljs-built_in">std</span>::chrono::duration&lt;<span class="hljs-keyword">float</span>&gt;(currentTime - startTime).count();

    <span class="hljs-comment">// Camera and projection matrices (shared by all objects)</span>
    glm::mat4 view = glm::lookAt(glm::vec3(<span class="hljs-number">2.0f</span>, <span class="hljs-number">2.0f</span>, <span class="hljs-number">6.0f</span>), glm::vec3(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>), glm::vec3(<span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>));
    glm::mat4 proj = glm::perspective(glm::radians(<span class="hljs-number">45.0f</span>),
                                     <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">float</span>&gt;(swapChainExtent.width) / <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">float</span>&gt;(swapChainExtent.height),
                                     <span class="hljs-number">0.1f</span>, <span class="hljs-number">20.0f</span>);
    proj[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] *= <span class="hljs-number">-1</span>; <span class="hljs-comment">// Flip Y for Vulkan</span>

    <span class="hljs-comment">// Update uniform buffers for each object</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; gameObject : gameObjects) {
        <span class="hljs-comment">// Apply continuous rotation to the object</span>
        gameObject.rotation.y += <span class="hljs-number">0.001f</span>; <span class="hljs-comment">// Slow rotation around Y axis</span>

        <span class="hljs-comment">// Get the model matrix for this object</span>
        glm::mat4 initialRotation = glm::rotate(glm::mat4(<span class="hljs-number">1.0f</span>), glm::radians(<span class="hljs-number">-90.0f</span>), glm::vec3(<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>));
        glm::mat4 model = gameObject.getModelMatrix() * initialRotation;

        <span class="hljs-comment">// Create and update the UBO</span>
        UniformBufferObject ubo{
            .model = model,
            .view = view,
            .proj = proj
        };

        <span class="hljs-comment">// Copy the UBO data to the mapped memory</span>
        <span class="hljs-built_in">memcpy</span>(gameObject.uniformBuffersMapped[currentFrame], &amp;ubo, <span class="hljs-keyword">sizeof</span>(ubo));
    }
}</code></pre>
<div class="source-toolbox"><span class="source-lang">c++</span><button class="copy-button" title="Copy to clipboard"><img src="r_files/octicons-16.svg" alt="copy icon" class="copy-icon"><span class="copy-toast">Copied!</span></button></div></div>
</div>
<div class="paragraph">
<p>Note that we’re sharing the view and projection matrices across all objects, but each object has its own model matrix.</p>
</div>
</div>
<div class="sect2">
<h3 id="_modify_the_command_buffer_recording"><a class="anchor" href="#_modify_the_command_buffer_recording"></a>Modify the Command Buffer Recording</h3>
<div class="paragraph">
<p>Finally, we’ll update the command buffer recording to draw each object:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-c++ hljs cpp" data-lang="c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recordCommandBuffer</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> imageIndex)</span> </span>{
    <span class="hljs-comment">// ... (beginning of the method remains the same)</span>

    <span class="hljs-comment">// Bind vertex and index buffers (shared by all objects)</span>
    commandBuffers[currentFrame].bindVertexBuffers(<span class="hljs-number">0</span>, *vertexBuffer, {<span class="hljs-number">0</span>});
    commandBuffers[currentFrame].bindIndexBuffer(*indexBuffer, <span class="hljs-number">0</span>, vk::IndexType::eUint32);

    <span class="hljs-comment">// Draw each object with its own descriptor set</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; gameObject : gameObjects) {
        <span class="hljs-comment">// Bind the descriptor set for this object</span>
        commandBuffers[currentFrame].bindDescriptorSets(
            vk::PipelineBindPoint::eGraphics,
            *pipelineLayout,
            <span class="hljs-number">0</span>,
            *gameObject.descriptorSets[currentFrame],
            <span class="hljs-literal">nullptr</span>
        );

        <span class="hljs-comment">// Draw the object</span>
        commandBuffers[currentFrame].drawIndexed(indices.size(), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);
    }

    <span class="hljs-comment">// ... (end of the method remains the same)</span>
}</code></pre>
<div class="source-toolbox"><span class="source-lang">c++</span><button class="copy-button" title="Copy to clipboard"><img src="r_files/octicons-16.svg" alt="copy icon" class="copy-icon"><span class="copy-toast">Copied!</span></button></div></div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_performance_considerations"><a class="anchor" href="#_performance_considerations"></a>Performance Considerations</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When rendering multiple objects, keep these performance considerations in mind:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>Minimize state changes</strong>: Group objects by material/texture to reduce binding changes.</p>
</li>
<li>
<p><strong>Use instancing</strong> for many identical objects (not covered in this tutorial).</p>
</li>
<li>
<p><strong>Consider push constants</strong> for small, frequently changing data instead of uniform buffers.</p>
</li>
<li>
<p><strong>Batch draw calls</strong> where possible to reduce CPU overhead.</p>
</li>
<li>
<p><strong>Use indirect drawing</strong> for large numbers of objects (not covered here).</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion"><a class="anchor" href="#_conclusion"></a>Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You’ve now learned how to render multiple objects in Vulkan by:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Creating a structure to hold per-object data</p>
</li>
<li>
<p>Duplicating the necessary resources with (uniform buffers, descriptor sets) for each object</p>
</li>
<li>
<p>Sharing resources that can be reused (vertex/index buffers, pipeline, textures)</p>
</li>
<li>
<p>Updating the rendering loop to draw each object with its own transformation</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>This approach gives you the flexibility to position, rotate, and 
scale objects independently while maintaining good performance by 
sharing resources where appropriate.</p>
</div>
<div class="paragraph">
<p>In a real-world application, you might extend this system with:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Object hierarchies (parent-child relationships)</p>
</li>
<li>
<p>Different meshes and materials for different objects</p>
</li>
<li>
<p>Frustum culling to avoid rendering objects outside the camera view</p>
</li>
<li>
<p>Level-of-detail systems for objects at different distances</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The foundation you’ve built here will serve as a solid starting point for these more advanced techniques.</p>
</div>
<div class="paragraph">
<p><a href="https://docs.vulkan.org/tutorial/latest/_attachments/36_multiple_objects.cpp">C++ code</a></p>
</div>
</div>
</div>
</article>
  </div>
</main>
</div>
<script id="site-script" src="r_files/site.js" data-ui-root-path="../../_"></script>
<script async="" src="r_files/highlight.js"></script>
<script src="r_files/split.js"></script>
<script>
    // Splitter should only be visible in non-mobile layouts (where a hamburger menu is used for nav)
    var width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
    var mobileNav = (width < 1024);

    if (!mobileNav) {
        var sizes = localStorage.getItem('split-sizes')

        if (sizes) {
            sizes = JSON.parse(sizes)
        } else {
            sizes = [25, 75]
        }

        var split = Split(['#split-0', '#split-1'], {
            sizes: sizes,
            onDragEnd: function (sizes) {
                localStorage.setItem('split-sizes', JSON.stringify(sizes))
            },
        })
    }
</script>
<script src="r_files/lunr.js"></script>
<script src="r_files/pako.min.js"></script>
<script src="r_files/search-ui.js" id="search-ui-script" data-site-root-path="../.." data-snippet-length="100" data-stylesheet="../../_/css/search.css"></script>
<script async="" src="r_files/search-index.js"></script>
<script async="" src="r_files/tabs.js"></script>
  

</body></html>